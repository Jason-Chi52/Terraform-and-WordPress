name: "Github Actions Activity"

# Defines when the workflow will run
on:
  # Manual trigger using GitHub Actions UI
  workflow_dispatch:
    inputs:
      # Input parameter to choose between apply or destroy actions
      action:
        description: 'Terraform Action to Perform'
        type: choice
        options:
          - Terraform_apply
          - Terraform_destroy
        default: Terraform_apply   # Default to apply if nothing is selected

# Global environment variables (used by both jobs)
env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  TF_IN_AUTOMATION: true
  TF_INPUT: 0

jobs:
  # Job for applying Terraform configurations
  terraform_apply:
    name: "Terraform_apply"
    # Run this job only when 'Terraform_apply' is selected
    if: ${{ github.event.inputs.action == 'Terraform_apply' }}
    # Type of runner to use
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v2  # (v4 is newer, v2 is fine for class)

      # Step 2: Set up AWS credentials for authentication
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2  # (v4 is newer, v2 is fine)
        with:
          # Using GitHub secrets for secure credential storage
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}     # Secret variable
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Secret variable
          aws-region: ${{ env.AWS_REGION }}  # Reference the repository variable

      # Step 3: Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.2  # (v3 is newer, v2.0.2 is fine)
        with:
          terraform_version: 1.1.9  # Specifies Terraform version to use
          terraform_wrapper: false

      # Step 4: Initialize Terraform working directory
      # NOTE: include -migrate-state so backend migration can proceed non-interactively
      - name: Terraform Init
        run: terraform init -migrate-state -input=false

      # Step 5: Preview the infrastructure changes
      - name: Terraform Plan
        run: terraform plan -no-color

      # Step 6: Apply the infrastructure changes
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false

      # Step 7: Show Terraform outputs (optional)
      - name: Terraform Output
        run: terraform output -no-color || true

  # Job for destroying Terraform-managed infrastructure
  terraform_destroy:
    name: "Terraform_destroy"
    # Run this job only when 'Terraform_destroy' is selected
    if: ${{ github.event.inputs.action == 'Terraform_destroy' }}
    # Type of runner to use
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up AWS credentials for authentication
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: 1.1.9
          terraform_wrapper: false

      # Step 4: Initialize Terraform working directory
      # NOTE: include -migrate-state here too, so destroy finds the S3 state
      - name: Terraform Init
        run: terraform init -migrate-state -input=false

      # Step 5: Destroy the infrastructure
      - name: Terraform Destroy
        run: terraform destroy -auto-approve -input=false
